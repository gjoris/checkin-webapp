// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package eu.droidit.blog.checkin.model;

import eu.droidit.blog.checkin.model.CheckinUser;
import eu.droidit.blog.checkin.model.CheckinUserDataOnDemand;
import eu.droidit.blog.checkin.model.CheckinUserIntegrationTest;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect CheckinUserIntegrationTest_Roo_IntegrationTest {
    
    declare @type: CheckinUserIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: CheckinUserIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    declare @type: CheckinUserIntegrationTest: @Transactional;
    
    @Autowired
    CheckinUserDataOnDemand CheckinUserIntegrationTest.dod;
    
    @Test
    public void CheckinUserIntegrationTest.testCountCheckinUsers() {
        Assert.assertNotNull("Data on demand for 'CheckinUser' failed to initialize correctly", dod.getRandomCheckinUser());
        long count = CheckinUser.countCheckinUsers();
        Assert.assertTrue("Counter for 'CheckinUser' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void CheckinUserIntegrationTest.testFindCheckinUser() {
        CheckinUser obj = dod.getRandomCheckinUser();
        Assert.assertNotNull("Data on demand for 'CheckinUser' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'CheckinUser' failed to provide an identifier", id);
        obj = CheckinUser.findCheckinUser(id);
        Assert.assertNotNull("Find method for 'CheckinUser' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'CheckinUser' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void CheckinUserIntegrationTest.testFindAllCheckinUsers() {
        Assert.assertNotNull("Data on demand for 'CheckinUser' failed to initialize correctly", dod.getRandomCheckinUser());
        long count = CheckinUser.countCheckinUsers();
        Assert.assertTrue("Too expensive to perform a find all test for 'CheckinUser', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<CheckinUser> result = CheckinUser.findAllCheckinUsers();
        Assert.assertNotNull("Find all method for 'CheckinUser' illegally returned null", result);
        Assert.assertTrue("Find all method for 'CheckinUser' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void CheckinUserIntegrationTest.testFindCheckinUserEntries() {
        Assert.assertNotNull("Data on demand for 'CheckinUser' failed to initialize correctly", dod.getRandomCheckinUser());
        long count = CheckinUser.countCheckinUsers();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<CheckinUser> result = CheckinUser.findCheckinUserEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'CheckinUser' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'CheckinUser' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void CheckinUserIntegrationTest.testFlush() {
        CheckinUser obj = dod.getRandomCheckinUser();
        Assert.assertNotNull("Data on demand for 'CheckinUser' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'CheckinUser' failed to provide an identifier", id);
        obj = CheckinUser.findCheckinUser(id);
        Assert.assertNotNull("Find method for 'CheckinUser' illegally returned null for id '" + id + "'", obj);
        boolean modified =  dod.modifyCheckinUser(obj);
        Integer currentVersion = obj.getVersion();
        obj.flush();
        Assert.assertTrue("Version for 'CheckinUser' failed to increment on flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void CheckinUserIntegrationTest.testMergeUpdate() {
        CheckinUser obj = dod.getRandomCheckinUser();
        Assert.assertNotNull("Data on demand for 'CheckinUser' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'CheckinUser' failed to provide an identifier", id);
        obj = CheckinUser.findCheckinUser(id);
        boolean modified =  dod.modifyCheckinUser(obj);
        Integer currentVersion = obj.getVersion();
        CheckinUser merged = obj.merge();
        obj.flush();
        Assert.assertEquals("Identifier of merged object not the same as identifier of original object", merged.getId(), id);
        Assert.assertTrue("Version for 'CheckinUser' failed to increment on merge and flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void CheckinUserIntegrationTest.testPersist() {
        Assert.assertNotNull("Data on demand for 'CheckinUser' failed to initialize correctly", dod.getRandomCheckinUser());
        CheckinUser obj = dod.getNewTransientCheckinUser(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'CheckinUser' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'CheckinUser' identifier to be null", obj.getId());
        obj.persist();
        obj.flush();
        Assert.assertNotNull("Expected 'CheckinUser' identifier to no longer be null", obj.getId());
    }
    
    @Test
    public void CheckinUserIntegrationTest.testRemove() {
        CheckinUser obj = dod.getRandomCheckinUser();
        Assert.assertNotNull("Data on demand for 'CheckinUser' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'CheckinUser' failed to provide an identifier", id);
        obj = CheckinUser.findCheckinUser(id);
        obj.remove();
        obj.flush();
        Assert.assertNull("Failed to remove 'CheckinUser' with identifier '" + id + "'", CheckinUser.findCheckinUser(id));
    }
    
}
