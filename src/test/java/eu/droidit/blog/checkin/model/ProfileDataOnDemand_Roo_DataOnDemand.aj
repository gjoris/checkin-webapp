// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package eu.droidit.blog.checkin.model;

import eu.droidit.blog.checkin.model.CheckinUserDataOnDemand;
import eu.droidit.blog.checkin.model.Profile;
import eu.droidit.blog.checkin.model.ProfileDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ProfileDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ProfileDataOnDemand: @Component;
    
    private Random ProfileDataOnDemand.rnd = new SecureRandom();
    
    private List<Profile> ProfileDataOnDemand.data;
    
    @Autowired
    CheckinUserDataOnDemand ProfileDataOnDemand.checkinUserDataOnDemand;
    
    public Profile ProfileDataOnDemand.getNewTransientProfile(int index) {
        Profile obj = new Profile();
        setComments(obj, index);
        setDateOfBirth(obj, index);
        setFirstName(obj, index);
        setLastName(obj, index);
        return obj;
    }
    
    public void ProfileDataOnDemand.setComments(Profile obj, int index) {
        String comments = "comments_" + index;
        if (comments.length() > 500) {
            comments = comments.substring(0, 500);
        }
        obj.setComments(comments);
    }
    
    public void ProfileDataOnDemand.setDateOfBirth(Profile obj, int index) {
        Date dateOfBirth = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateOfBirth(dateOfBirth);
    }
    
    public void ProfileDataOnDemand.setFirstName(Profile obj, int index) {
        String firstName = "firstName_" + index;
        obj.setFirstName(firstName);
    }
    
    public void ProfileDataOnDemand.setLastName(Profile obj, int index) {
        String lastName = "lastName_" + index;
        obj.setLastName(lastName);
    }
    
    public Profile ProfileDataOnDemand.getSpecificProfile(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Profile obj = data.get(index);
        Long id = obj.getId();
        return Profile.findProfile(id);
    }
    
    public Profile ProfileDataOnDemand.getRandomProfile() {
        init();
        Profile obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Profile.findProfile(id);
    }
    
    public boolean ProfileDataOnDemand.modifyProfile(Profile obj) {
        return false;
    }
    
    public void ProfileDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Profile.findProfileEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Profile' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Profile>();
        for (int i = 0; i < 10; i++) {
            Profile obj = getNewTransientProfile(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
